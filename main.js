(()=>{"use strict";var n={426:(n,r,t)=>{t.d(r,{Z:()=>d});var e=t(537),o=t.n(e),i=t(645),a=t.n(i),A=t(667),c=t.n(A),s=new URL(t(687),t.b),l=a()(o()),p=c()(s);l.push([n.id,'.form-control i {\r\n    /*position: absolute;*/\r\n    /*left: 50px;*/\r\n}\r\n\r\n@font-face {\r\n    font-family: "Montserrat";\r\n    src: url('+p+") format('truetype');\r\n    font-weight: 400;\r\n    font-style: normal;\r\n}\r\n\r\n* {\r\n    font-family: Montserrat, sans-serif;\r\n}\r\n\r\nbody {\r\n    margin: 0;\r\n\r\n}\r\n\r\nh1 {\r\n    margin: 0;\r\n}\r\n\r\np {\r\n    margin: 0;\r\n}\r\n\r\n#top-bar {\r\n    box-shadow: 0 2px 3px 0 rgb(0 0 0 / 15%);\r\n    height: 65px;\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n.top-bar-content {\r\n    margin: 5px;\r\n    padding: 5px;\r\n}\r\n.form-control {\r\n    position: relative;\r\n}\r\n\r\n.form-control input {\r\n    border: 2px solid whitesmoke;\r\n    border-radius: 4px;\r\n    display: block;\r\n    font-family: inherit;\r\n    width: 93%;\r\n    padding: 10px;\r\n    font-size: 14px;\r\n}\r\n\r\n.form-control.error input {\r\n    border-color: darkred;\r\n}\r\n\r\n.form-control.error i.fa-exclamation-circle {\r\n    color: darkred;\r\n    visibility: visible;\r\n}\r\n\r\n.form-control i {\r\n    visibility: hidden;\r\n    position: absolute;\r\n    top: 18px;\r\n    right: 10px;\r\n}\r\n\r\n#content {\r\n    display: flex;\r\n    width: 100%;\r\n    flex-direction: column;\r\n    justify-content: start;\r\n    align-items: center;\r\n    height: calc(100vh - 65px);\r\n    background: whitesmoke;\r\n    overflow: visible;\r\n\r\n    opacity: 0;\r\n    transition: all 0.2s ease;\r\n}\r\n\r\n#weather-display {\r\n    position: relative;\r\n    background: white;\r\n    border-radius: 5px;\r\n    box-shadow: 0px 15px 30px rgb(0 0 0 / 15%);\r\n    margin-top: 50px;\r\n    min-width: 300px;\r\n    min-height: 500px;\r\n    max-height: calc(100vh - 55px);\r\n    overflow: hidden;\r\n}\r\n\r\n#header-container {\r\n    width: 100%;\r\n    height: 44px;\r\n    background: lightskyblue;\r\n    display: flex;\r\n    padding: 5px;\r\n}\r\n\r\n#header {\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    height: 100%;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n\r\n#city {\r\n    font-size: 18px;\r\n    font-weight: bold;\r\n}\r\n\r\n#city-data {\r\n    font-size: 12px;\r\n}\r\n\r\n#week {\r\n    width: 100%;\r\n    height: calc(100% - 44px);\r\n    display: flex;\r\n    align-items: start;\r\n    justify-content: space-evenly;\r\n    margin-top: 30px;\r\n}\r\n\r\n.days {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-left: 20px;\r\n    margin-right: 20px;\r\n    padding: 10px;\r\n}\r\n\r\n.min-max-temps {\r\n    display: flex;\r\n}\r\n\r\n.max {\r\n    margin: 3px;\r\n}\r\n\r\n.min {\r\n    margin: 3px;\r\n    color: lightslategrey;\r\n}\r\n\r\n.other {\r\n    font-size: 11px;\r\n}\r\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,cAAc;AAClB;;AAEA;IACI,yBAAyB;IACzB,+DAAuD;IACvD,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,SAAS;;AAEb;;AAEA;IACI,SAAS;AACb;;AAEA;IACI,SAAS;AACb;;AAEA;IACI,wCAAwC;IACxC,YAAY;IACZ,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;AACA;IACI,kBAAkB;AACtB;;AAEA;IACI,4BAA4B;IAC5B,kBAAkB;IAClB,cAAc;IACd,oBAAoB;IACpB,UAAU;IACV,aAAa;IACb,eAAe;AACnB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,cAAc;IACd,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;IAClB,kBAAkB;IAClB,SAAS;IACT,WAAW;AACf;;AAEA;IACI,aAAa;IACb,WAAW;IACX,sBAAsB;IACtB,sBAAsB;IACtB,mBAAmB;IACnB,0BAA0B;IAC1B,sBAAsB;IACtB,iBAAiB;;IAEjB,UAAU;IACV,yBAAyB;AAC7B;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,kBAAkB;IAClB,0CAA0C;IAC1C,gBAAgB;IAChB,gBAAgB;IAChB,iBAAiB;IACjB,8BAA8B;IAC9B,gBAAgB;AACpB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,wBAAwB;IACxB,aAAa;IACb,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,mBAAmB;IACnB,uBAAuB;AAC3B;;;AAGA;IACI,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,WAAW;IACX,yBAAyB;IACzB,aAAa;IACb,kBAAkB;IAClB,6BAA6B;IAC7B,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,uBAAuB;IACvB,iBAAiB;IACjB,kBAAkB;IAClB,aAAa;AACjB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;IACX,qBAAqB;AACzB;;AAEA;IACI,eAAe;AACnB",sourcesContent:[".form-control i {\r\n    /*position: absolute;*/\r\n    /*left: 50px;*/\r\n}\r\n\r\n@font-face {\r\n    font-family: \"Montserrat\";\r\n    src: url('./Montserrat-Regular.ttf') format('truetype');\r\n    font-weight: 400;\r\n    font-style: normal;\r\n}\r\n\r\n* {\r\n    font-family: Montserrat, sans-serif;\r\n}\r\n\r\nbody {\r\n    margin: 0;\r\n\r\n}\r\n\r\nh1 {\r\n    margin: 0;\r\n}\r\n\r\np {\r\n    margin: 0;\r\n}\r\n\r\n#top-bar {\r\n    box-shadow: 0 2px 3px 0 rgb(0 0 0 / 15%);\r\n    height: 65px;\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n.top-bar-content {\r\n    margin: 5px;\r\n    padding: 5px;\r\n}\r\n.form-control {\r\n    position: relative;\r\n}\r\n\r\n.form-control input {\r\n    border: 2px solid whitesmoke;\r\n    border-radius: 4px;\r\n    display: block;\r\n    font-family: inherit;\r\n    width: 93%;\r\n    padding: 10px;\r\n    font-size: 14px;\r\n}\r\n\r\n.form-control.error input {\r\n    border-color: darkred;\r\n}\r\n\r\n.form-control.error i.fa-exclamation-circle {\r\n    color: darkred;\r\n    visibility: visible;\r\n}\r\n\r\n.form-control i {\r\n    visibility: hidden;\r\n    position: absolute;\r\n    top: 18px;\r\n    right: 10px;\r\n}\r\n\r\n#content {\r\n    display: flex;\r\n    width: 100%;\r\n    flex-direction: column;\r\n    justify-content: start;\r\n    align-items: center;\r\n    height: calc(100vh - 65px);\r\n    background: whitesmoke;\r\n    overflow: visible;\r\n\r\n    opacity: 0;\r\n    transition: all 0.2s ease;\r\n}\r\n\r\n#weather-display {\r\n    position: relative;\r\n    background: white;\r\n    border-radius: 5px;\r\n    box-shadow: 0px 15px 30px rgb(0 0 0 / 15%);\r\n    margin-top: 50px;\r\n    min-width: 300px;\r\n    min-height: 500px;\r\n    max-height: calc(100vh - 55px);\r\n    overflow: hidden;\r\n}\r\n\r\n#header-container {\r\n    width: 100%;\r\n    height: 44px;\r\n    background: lightskyblue;\r\n    display: flex;\r\n    padding: 5px;\r\n}\r\n\r\n#header {\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    height: 100%;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n\r\n#city {\r\n    font-size: 18px;\r\n    font-weight: bold;\r\n}\r\n\r\n#city-data {\r\n    font-size: 12px;\r\n}\r\n\r\n#week {\r\n    width: 100%;\r\n    height: calc(100% - 44px);\r\n    display: flex;\r\n    align-items: start;\r\n    justify-content: space-evenly;\r\n    margin-top: 30px;\r\n}\r\n\r\n.days {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-left: 20px;\r\n    margin-right: 20px;\r\n    padding: 10px;\r\n}\r\n\r\n.min-max-temps {\r\n    display: flex;\r\n}\r\n\r\n.max {\r\n    margin: 3px;\r\n}\r\n\r\n.min {\r\n    margin: 3px;\r\n    color: lightslategrey;\r\n}\r\n\r\n.other {\r\n    font-size: 11px;\r\n}\r\n"],sourceRoot:""}]);const d=l},645:n=>{n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var t="",e=void 0!==r[5];return r[4]&&(t+="@supports (".concat(r[4],") {")),r[2]&&(t+="@media ".concat(r[2]," {")),e&&(t+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),t+=n(r),e&&(t+="}"),r[2]&&(t+="}"),r[4]&&(t+="}"),t})).join("")},r.i=function(n,t,e,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(e)for(var A=0;A<this.length;A++){var c=this[A][0];null!=c&&(a[c]=!0)}for(var s=0;s<n.length;s++){var l=[].concat(n[s]);e&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),r.push(l))}},r}},667:n=>{n.exports=function(n,r){return r||(r={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),r.hash&&(n+=r.hash),/["'() \t\n]|(%20)/.test(n)||r.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var r=n[1],t=n[3];if(!t)return r;if("function"==typeof btoa){var e=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(e),i="/*# ".concat(o," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[r].concat(a).concat([i]).join("\n")}return[r].join("\n")}},379:n=>{var r=[];function t(n){for(var t=-1,e=0;e<r.length;e++)if(r[e].identifier===n){t=e;break}return t}function e(n,e){for(var i={},a=[],A=0;A<n.length;A++){var c=n[A],s=e.base?c[0]+e.base:c[0],l=i[s]||0,p="".concat(s," ").concat(l);i[s]=l+1;var d=t(p),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)r[d].references++,r[d].updater(u);else{var f=o(u,e);e.byIndex=A,r.splice(A,0,{identifier:p,updater:f,references:1})}a.push(p)}return a}function o(n,r){var t=r.domAPI(r);return t.update(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap&&r.supports===n.supports&&r.layer===n.layer)return;t.update(n=r)}else t.remove()}}n.exports=function(n,o){var i=e(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var A=t(i[a]);r[A].references--}for(var c=e(n,o),s=0;s<i.length;s++){var l=t(i[s]);0===r[l].references&&(r[l].updater(),r.splice(l,1))}i=c}}},569:n=>{var r={};n.exports=function(n,t){var e=function(n){if(void 0===r[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}r[n]=t}return r[n]}(n);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");e.appendChild(t)}},216:n=>{n.exports=function(n){var r=document.createElement("style");return n.setAttributes(r,n.attributes),n.insert(r,n.options),r}},565:(n,r,t)=>{n.exports=function(n){var r=t.nc;r&&n.setAttribute("nonce",r)}},795:n=>{n.exports=function(n){var r=n.insertStyleElement(n);return{update:function(t){!function(n,r,t){var e="";t.supports&&(e+="@supports (".concat(t.supports,") {")),t.media&&(e+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(e+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),e+=t.css,o&&(e+="}"),t.media&&(e+="}"),t.supports&&(e+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(e+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),r.styleTagTransform(e,n,r.options)}(r,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(r)}}}},589:n=>{n.exports=function(n,r){if(r.styleSheet)r.styleSheet.cssText=n;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(n))}}},687:(n,r,t)=>{n.exports=t.p+"3cd786652b8a2e9d41f2.ttf"}},r={};function t(e){var o=r[e];if(void 0!==o)return o.exports;var i=r[e]={id:e,exports:{}};return n[e](i,i.exports,t),i.exports}t.m=n,t.n=n=>{var r=n&&n.__esModule?()=>n.default:()=>n;return t.d(r,{a:r}),r},t.d=(n,r)=>{for(var e in r)t.o(r,e)&&!t.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:r[e]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,r)=>Object.prototype.hasOwnProperty.call(n,r),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var r=t.g.document;if(!n&&r&&(r.currentScript&&(n=r.currentScript.src),!n)){var e=r.getElementsByTagName("script");e.length&&(n=e[e.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,(()=>{var n=t(379),r=t.n(n),e=t(795),o=t.n(e),i=t(569),a=t.n(i),A=t(565),c=t.n(A),s=t(216),l=t.n(s),p=t(589),d=t.n(p),u=t(426),f={};f.styleTagTransform=d(),f.setAttributes=c(),f.insert=a().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=l(),r()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals;const m=document.getElementById("search");function h(n){console.log(n),document.getElementById("search").parentElement.className="form-control error top-bar-content"}async function B(n){const r=await fetch(`https://api.weatherapi.com/v1/current.json?key=5a33c28134404542864203800222901&q=${n}&aqi=yes`,{mode:"cors"});return await r.json()}async function g(n){const r=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=5a33c28134404542864203800222901&q=${n}&days=7&aqi=no&alerts=no`,{mode:"cors"});return await r.json()}function y(n){document.getElementById("search").parentElement.className="form-control top-bar-content",document.getElementById("city").textContent=n.location.name,document.getElementById("city-data").textContent=`${n.current.temp_c}°C Feels like ${n.current.feelslike_c}°C`}function C(n){const r=n.forecast.forecastday;console.log(r);for(let n=0;n<r.length;n++){let t=r[n],e=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"][new Date(t.date).getDay()];document.getElementById(`day-${n}`).textContent=e;let o=document.getElementById(`max-day-${n}`),i=document.getElementById(`min-day-${n}`);o.textContent=t.day.maxtemp_c+"°C",i.textContent=t.day.mintemp_c+"°C",document.getElementById(`weather-icon-${n}`).src=t.day.condition.icon;let a=document.getElementById(`humidity-${n}`),A=document.getElementById(`wind-${n}`);a.textContent=`Humidity: ${t.day.avghumidity}%`,A.textContent=`Max Wind: ${t.day.maxwind_mph} mph`}}window.addEventListener("keydown",(n=>{""!==n.key&&"Enter"===n.key&&(console.log(n.key,m.value),B(m.value).then((n=>y(n))).catch((n=>h(n))),g(m.value).then((n=>C(n))).catch((n=>h(n))))})),window.navigator.geolocation&&window.navigator.geolocation.getCurrentPosition((function(n){const{latitude:r,longitude:t}=n.coords;fetch(`https://api.opencagedata.com/geocode/v1/json?q=${r}+${t}&key=b994611087c84fb6b7d522f44f1a9e6d`).then((n=>n.json())).then((n=>{const r=n.results[0].components.city;B(r).then((n=>y(n))).then((n=>{document.getElementById("content").style.opacity="1"})).catch((n=>console.log("getWeather Error: ",n))),g(r).then((n=>C(n))).catch((n=>console.log("getForecast Error: ",n)))}))}),(()=>{console.log("Error fetching user location")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,